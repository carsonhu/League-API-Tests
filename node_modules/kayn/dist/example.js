'use strict';

var _ = require('./');

var _grabbingAllTheMatchDtosOfAPlayer = require('./examples/grabbing-all-the-match-dtos-of-a-player');

var _grabbingAllTheMatchDtosOfAPlayer2 = _interopRequireDefault(_grabbingAllTheMatchDtosOfAPlayer);

var _verifyingASummoner = require('./examples/verifying-a-summoner');

var _verifyingASummoner2 = _interopRequireDefault(_verifyingASummoner);

var _tournamentStubCreate = require('./examples/tournament-stub-create');

var _tournamentStubCreate2 = _interopRequireDefault(_tournamentStubCreate);

var _grabbingSpecificChampionScores = require('./examples/grabbing-specific-champion-scores');

var _grabbingSpecificChampionScores2 = _interopRequireDefault(_grabbingSpecificChampionScores);

var _sortChallengerLeagueByNumberOfWins = require('./examples/sort-challenger-league-by-number-of-wins');

var _sortChallengerLeagueByNumberOfWins2 = _interopRequireDefault(_sortChallengerLeagueByNumberOfWins);

var _grabbingCurrGameInfoOfFirstFeaturedGames = require('./examples/grabbing-curr-game-info-of-first-featured-games');

var _grabbingCurrGameInfoOfFirstFeaturedGames2 = _interopRequireDefault(_grabbingCurrGameInfoOfFirstFeaturedGames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*
const redisCache = new RedisCache({
    host: 'localhost',
    port: 5000,
    keyPrefix: 'kayn',
});
*/

const myCache = new _.LRUCache({ max: 1 });

const kayn = (0, _.Kayn)('yikes')({
    region: 'na',
    debugOptions: {
        isEnabled: true,
        showKey: false
    },
    requestOptions: {
        shouldRetry: true,
        numberOfRetriesBeforeAbort: 3,
        delayBeforeRetry: 1000,
        shouldExitOn403: true
    },
    cacheOptions: {
        cache: myCache,
        ttls: {},
        timeToLives: {
            useDefault: true,
            byGroup: {
                STATIC: 1000
            },
            byMethod: {
                [_.METHOD_NAMES.STATIC.GET_REFORGED_RUNE_PATH_LIST]: 5000,
                [_.METHOD_NAMES.STATIC.GET_REFORGED_RUNE_PATH_BY_ID]: 5000,
                [_.METHOD_NAMES.STATIC.GET_TARBALL_LINK]: 5000
            }
        }
    }
});

const main = (() => {
    var _ref = _asyncToGenerator(function* () {
        const { accountId } = yield kayn.Summoner.by.name('Contractz');
        console.log((yield kayn.Matchlist.Recent.by.accountID(accountId)));
    });

    return function main() {
        return _ref.apply(this, arguments);
    };
})();

main();